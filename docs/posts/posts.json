[
  {
    "path": "posts/welcome/",
    "title": "Extracting Information from 10Q filings",
    "description": "In this post, I explain how to extract financial information (statement of balance sheet) of **Apple Inc.** company from its third quarter 10Q filing for the year 2018.",
    "author": [
      {
        "name": "Mohamed Badhrudeen",
        "url": {}
      }
    ],
    "date": "2021-04-09",
    "categories": [],
    "contents": "\r\nThe information contains in this post is purely for educational purposes. I am not an R savant, so the code you will see below may not be efficient, but it does the job. Feel free to make it efficient.\r\nBackground\r\nOne of the ways I use to learn R is to pick a small side project, and break it down into multiple tasks. This post is part of a side project that I am working on, which is to extract balance sheet information of a company using their 10Q filings. I just want to start with one filing and extend it to multiple filings using a for loop. So lets start.\r\nAny company that is traded in US has to file its Quarterly financial data (unaudited), which is publicly available. You can also go for 10K filings, which is filed at the end each year. But I like to see the short term progress of a company more than its yearly progress. You can find the data at the SEC website. For the illustration purpose, lets use Apple Inc. Lets say we want to get Apple’s financial information for the year2018.\r\nData\r\nTo see the 10Q filings, go to SEC website, and type in the company’ name, and navigate to 10Q filings.\r\nOnce the appropriate 10Q filing is selected, you will see URL of that filing, copy it. As a side note there is an R package called “Edgar” that you can use to get the filings in HTML format and download it in your local drive.\r\n\r\n\r\nlibrary(stringr)\r\nlibrary(rvest)\r\nlibrary(XML)\r\nlibrary(gsubfn)\r\nlibrary(data.table)\r\n\r\nurl <- \"https://www.sec.gov/Archives/edgar/data/0000320193/000032019318000100/a10-qq320186302018.htm\"\r\n\r\n\r\n\r\nI have seen different companies using different terms in their filings, which is dependent on what kind of company it is. For example, Biotechnology companies use R&D expenses, whereas most Financial companies does not. So, make sure to use correct words if you are extracting a specific variable.\r\nFor balance sheet, I picked words “total assets” and “total liabilities”. You have to remember that strings are case sensitive. In some filings you might see “Total Assets”, in other filings “total assets”. I have not found any way to get around this problem. I think it is possible to convert the words in the html files into lower case and compare it to given string. Anyway, we will open each file, look for the words, and grab the first table, and extract all rows “tr” in the table.\r\n\r\n\r\n#get all lines in the document \r\nlines <- url %>%\r\n  read_html() %>%\r\n  html_nodes(xpath=\r\n  \"//table[contains(., 'Total assets') and contains(., 'Total liabilities')]\") %>%\r\n  html_nodes(xpath = 'tr') \r\n\r\n#Creating an empty table\r\ntable <- data.frame(variables = character(), values = double(), stringsAsFactors=FALSE)\r\nrow_ <- 1 #initialize row number \r\n\r\n\r\n\r\nThe above code look for all tables in the document and picks the table taht contains our words. Once the table is identified, it copies all rows into “lines” variable.\r\n\r\n\r\n#Look at each rows separately to extract the information\r\nfor(i in 1:length(lines)){\r\n  # get content of the line\r\n  linecontent <- lines[[i]]%>%\r\n    html_children()%>%\r\n    html_text()%>%\r\n    gsub(\"\\r\\n\",\"\",.)\r\n  \r\n  # attribute the content to free columns\r\n  if (grepl(\"[[:alpha:]]\", str_squish(linecontent[1]))  & nchar(linecontent[[1]]) < 30) { \r\n    # Check if the first cell contains any words and that word contains less than 30 letters \r\n    \r\n    val <- str_extract(\r\n      str_squish(linecontent[-1]), \r\n      \"[[:digit:]]+(,\\\\d+)*\") #If yes, then extract the line\r\n    \r\n    if (all(is.na(val), na.rm = TRUE)) {} \r\n    #Skipping lines that does not contain any numerical values \r\n    \r\n    else {\r\n      table[row_, ] <- #Add the extracted lines, and replace symbols like paranthesis. \r\n        c(str_squish(linecontent[1]), \r\n          gsubfn(\".\", list(\",\"=\"\", \"(\"= \"-\", \")\" = \"\"), \r\n                 linecontent[-1]\r\n                 [which(!is.na(\r\n                   str_extract(str_squish(linecontent[-1]), \r\n                                           \"[[:digit:]]+(,\\\\d+)*\")))[1]]))\r\n      row_ <- row_ + 1 }\r\n  }\r\n \r\n}\r\nbalance_sheets <-  as.data.frame(na.omit(table), \r\n                                 stringsAsFactors=FALSE) #store the table\r\nprint(balance_sheets)\r\n\r\n\r\n                       variables values\r\n1      Cash and cash equivalents  31971\r\n2       Accounts receivable, net  14104\r\n3                    Inventories   5936\r\n4   Vendor non-trade receivables  12263\r\n5           Other current assets  12488\r\n6           Total current assets 115761\r\n7       Other non-current assets  22546\r\n8                   Total assets 349197\r\n9               Accounts payable  38489\r\n10              Accrued expenses  25184\r\n11              Deferred revenue   7403\r\n12              Commercial paper  11974\r\n13     Total current liabilities  88548\r\n14 Deferred revenue, non-current   2878\r\n15                Long-term debt  97128\r\n16 Other non-current liabilities  45694\r\n17             Total liabilities 234248\r\n18             Retained earnings  79436\r\n19    Total shareholders’ equity 114949\r\n\r\nAnd, there you go.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-04-11T01:59:26-05:00",
    "input_file": {}
  }
]
